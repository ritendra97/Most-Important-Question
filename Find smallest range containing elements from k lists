//Find smallest range containing elements from k lists
import java.util.*;
public class Solution {
	
	static int N =5;
	
	static void findSmallestRange(int arr[][], int n, int k){
		
		int ptr[] = new int[N];
		for (int i = 0; i <= k; i++) {
            ptr[i] = 0;
        }
		
		int minval;
		int maxval;
		int minele = 0;
		int maxele = 0;
		
		int minrange = Integer.MAX_VALUE;
		int minind;
		
		int flag;
		
		while(true) {
			
			minind=0;
			minval = Integer.MAX_VALUE;
			maxval = Integer.MIN_VALUE;
			flag=0;
					
			for(int i=0;i<k;i++) {
				
				if(ptr[i]==n){
					flag=1;
					break;
				}
				if(ptr[i] <n && arr[i][ptr[i]]<minval) {
					minind = i;
					minval = arr[i][ptr[i]];
				}
				
				if(ptr[i] <n && arr[i][ptr[i]]>maxval) {
					maxval = arr[i][ptr[i]];
				}
			}
			
			if (flag == 1) {
                break;
            }
			
			ptr[minind]++;
			
			if(maxval-minval<minrange) {
				
				maxele = maxval;
				minele = minval;
				minrange = maxele-minele;
			}
		}
		System.out.printf("The smallest range is [%d, %d]\n", minele, maxele);
    }
	public static void main(String[] args) {
		
		int arr[][] = {{ 4,7,9,12,15 },
	                   { 0,8,10,14,20},
	                   { 6,12,16,30,50}};
		
		int k = arr.length;
		  
        findSmallestRange(arr, N, k);
	}

}
// O(n*k*log(k))

import java.util.*;
class Node
{
	int value;
	int rono;
	int cono;
	
	Node(int value,int rono,int cono){
		this.value=value;
		this.rono = rono;
		this.cono = cono;
	}
}
public class Solution {
	
	static void findSmallestRange(int arr[][], int n, int k){
		PriorityQueue<Node> minheap = new PriorityQueue<Node>(new Comparator<Node>() {
			
			public int compare(Node n1, Node n2) {
				 
				return n1.value-n2.value;
			}
		});
		
		int start =0;
		int end =0;
		int max = Integer.MIN_VALUE;
	    int min = Integer.MAX_VALUE;
	    int range = Integer.MAX_VALUE;
	    
		for(int i=0;i<k;i++) {
			minheap.add(new Node(arr[i][0],i,1));
			max = Math.max(max,arr[i][0]);
		}
		
		while(true) {
			
			Node top = minheap.poll();
			
			min = top.value;
			
			if (range > max - min) {
                range = max - min ;
                start = min;
                end = max;
            }
			
			if(top.cono==n-1)
				break;
			
			if(top.cono<n){
				minheap.add(new Node(arr[top.rono][top.cono],top.rono,top.cono+1));
			}
			
			max= Math.max(arr[top.rono][top.cono], max);
		}
		System.out.println(start+" "+end);
    }
	public static void main(String[] args) {
		
		int arr[][] = {{1, 2, 3, 4},
                {5, 6 ,7 ,8},
                {9 ,10, 11, 12}};
		
		int k = arr.length;
		  
        findSmallestRange(arr, 5, k);
	}

}
